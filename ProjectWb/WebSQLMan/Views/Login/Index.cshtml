@model WebSQLMan.Models.ConnectionParams

@{
    ViewBag.Title = "Home" + ViewBag.Errors;
    //Layout = "~/Views/Shared/_Layout.cshtml";
    var X = Html.X();
}

<style type="text/css">
    .RedBorder {
        border: none;
        background-color: transparent;
        border-bottom-color: transparent;
        border-color: transparent;
        border-top-color: transparent;
        outline-color: White;
    }
</style>



@(X.ResourceManager())
@(
 X.Window()
                .Title("Login")
                .Width(400)
                .Height(260)
                .Layout(LayoutType.Fit)
                .Closable(false)
                .Border(false)
                .Draggable(false)
                .Items(
                    Html.X().FormPanel()
                        .ID("LoginForm")
                        .Frame(true)
                        .DefaultAnchor("100%")
                        .BodyPadding(6)
                        .Listeners(l => l.ValidityChange.Handler = "#{ConBut}.setDisabled(!valid);")
                        .FieldDefaults(def =>
                        {
                            def.MsgTarget = MessageTarget.Side;
                        })
                        .Items(
                            Html.X().TextFieldFor(m => m.ServerName),
                                Html.X().ComboBoxFor(m => m.Authentification).Text("WindowsAuthentication").ID("Auth")
                                                                 .Editable(false).Listeners(l => l.Change.Handler = "#{Log}.setDisabled( this.getValue() == 1 );"+
                                                                                                                    "#{Pass}.setDisabled( this.getValue() == 1 );"),
                            Html.X().TextFieldFor(m => m.Login).ID("Log").Disabled(true),
                            Html.X().TextFieldFor(m => m.Password).ID("Pass").Disabled(true),
                            Html.X().TextArea().Text((string)HttpContext.Current.Cache["Errors"])
                                                .Cls("RedBorder").AutoScroll(true).Editable(false)
                        )
                )
            .Buttons(
                    Html.X().Button().ID("ConBut").Text("Connect").Disabled(true).DirectEvents(de =>
                    {
                        de.Click.Url = Url.Action("Connect");
                        de.Click.Before = @"if (!#{LoginForm}.getForm().isValid()) { return false; }
                            Ext.Msg.wait('Conecting to the database...', 'Connecting');";
                        de.Click.FormID = "LoginForm";
                        de.Click.Failure = @"Ext.Msg.show({
                                title   : 'Error',
                                msg     : 'Error during connection',
                                minWidth: 200,
                                modal   : true,
                                icon    : Ext.Msg.ERROR,
                                buttons : Ext.Msg.OK
                            });";

                    })
            )
)
